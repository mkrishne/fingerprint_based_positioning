classdef OfflineAlgo
    methods ( Static = true )
        function [RPs_in_a_subrgn, no_of_RPs_in_a_subrgn, no_subrgns] = functionOfflineSetup(RP_positions_per_row, RP_SIM_TYPE)
            if(RP_SIM_TYPE == 1)
                no_subrgns = (RP_positions_per_row-1)^2; %a 5x5 matrix has 16 SRs
                no_subrgns_per_row = sqrt(no_subrgns);
                no_of_RPs_in_a_subrgn = 4;
                RPs_in_a_subrgn = zeros(no_subrgns,no_of_RPs_in_a_subrgn); % RPs_in_a_subrgn --> 16x4 vector; 4 vertices of 16 subregions
                for subrgn_idx = 1:no_subrgns
                     vertex1 = subrgn_idx + floor((subrgn_idx-1)/no_subrgns_per_row);  %formula -> SR1 has vertices 1,2,6,7; SR5 has vertices 6,7,11,12
                     vertex2 = vertex1 + 1;
                     vertex3 = vertex1 + RP_positions_per_row;
                     vertex4 = vertex2 + RP_positions_per_row;
                     RPs_in_a_subrgn(subrgn_idx,1) = vertex1;
                     RPs_in_a_subrgn(subrgn_idx,2) = vertex2;
                     RPs_in_a_subrgn(subrgn_idx,3) = vertex3;
                     RPs_in_a_subrgn(subrgn_idx,4) = vertex4;
                end
            
             elseif(RP_SIM_TYPE == 2)  
                no_minor_subrgns = (RP_positions_per_row-1)^2; %a 5x5 matrix has 16 minor SRs
                no_minor_subrgns_per_row = sqrt(no_minor_subrgns);
                no_major_subrgns = 2*(no_minor_subrgns_per_row-1)*no_minor_subrgns_per_row; % 5x5 matrix has 24 major SRs i.e. 2 smaller subregion areas
                no_of_RPs_in_mjr_subrgn = 6;
                RPs_in_mjr_subrgn = zeros(no_major_subrgns,no_of_RPs_in_mjr_subrgn); % RPs_in_mjr_subrgn --> 16x4 vector; 4 vertices of 16 subregions
                no_major_subrgns_type1 = no_major_subrgns/2;
                for subrgn_idx_type1 = 1:no_major_subrgns_type1
                     vertex1 = subrgn_idx_type1 + floor((subrgn_idx_type1-1)/(no_minor_subrgns_per_row-1))*2;  %formula -> major SR type1 has vertices 1,2,3,6,7,8; SR5 has vertices 7,8,9,12,13,14
                     vertex2 = vertex1 + 1;
                     vertex3 = vertex2 + 1;
                     vertex4 = vertex1 + RP_positions_per_row;
                     vertex5 = vertex2 + RP_positions_per_row;
                     vertex6 = vertex3 + RP_positions_per_row;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,1) = vertex1;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,2) = vertex2;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,3) = vertex3;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,4) = vertex4;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,5) = vertex5;
                     RPs_in_mjr_subrgn(subrgn_idx_type1,6) = vertex6;
                end
                no_major_subrgns_type2 = no_major_subrgns/2;
                for subrgn_idx_type2 = 1:no_major_subrgns_type2
                     vertex1 = subrgn_idx_type2 + floor((subrgn_idx_type2-1)/no_minor_subrgns_per_row);  %formula -> major SR type2 has vertices 1,2,6,7,11,12; SR5 has vertices 7,8,12,13,17,18
                     vertex2 = vertex1 + 1;
                     vertex3 = vertex1 + RP_positions_per_row;
                     vertex4 = vertex2 + RP_positions_per_row;
                     vertex5 = vertex3 + RP_positions_per_row;
                     vertex6 = vertex4 + RP_positions_per_row;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,1) = vertex1;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,2) = vertex2;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,3) = vertex3;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,4) = vertex4;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,5) = vertex5;
                     RPs_in_mjr_subrgn(no_major_subrgns_type1+subrgn_idx_type2,6) = vertex6;
                end
                RPs_in_a_subrgn = RPs_in_mjr_subrgn;
                no_of_RPs_in_a_subrgn = no_of_RPs_in_mjr_subrgn;
                no_subrgns = no_major_subrgns;
          elseif(RP_SIM_TYPE == 3)
              no_subrgns = (RP_positions_per_row-2)^2; %a 5x5 matrix has 9 minor SRs
              no_subrgns_per_row = sqrt(no_subrgns);
              no_of_RPs_in_a_subrgn = 9;
              RPs_in_a_subrgn = zeros(no_subrgns,no_of_RPs_in_a_subrgn); % RPs_in_a_subrgn --> 16x4 vector; 4 vertices of 16 subregionss
              for subrgn_idx = 1:no_subrgns
                     vertex1 = subrgn_idx + 2*floor((subrgn_idx-1)/no_subrgns_per_row);  %formula -> SR1 has vertices 1,2,3,6,7,8,11,12,13; SR4 has vertices 6,7,8,11,12,13,16,17,18
                     vertex2 = vertex1 + 1;
                     vertex3 = vertex2 + 1;
                     vertex4 = vertex1 + RP_positions_per_row;
                     vertex5 = vertex2 + RP_positions_per_row;
                     vertex6 = vertex3 + RP_positions_per_row;
                     vertex7 = vertex4 + RP_positions_per_row;
                     vertex8 = vertex5 + RP_positions_per_row;
                     vertex9 = vertex6 + RP_positions_per_row;
                     RPs_in_a_subrgn(subrgn_idx,1) = vertex1;
                     RPs_in_a_subrgn(subrgn_idx,2) = vertex2;
                     RPs_in_a_subrgn(subrgn_idx,3) = vertex3;
                     RPs_in_a_subrgn(subrgn_idx,4) = vertex4;
                     RPs_in_a_subrgn(subrgn_idx,5) = vertex5;
                     RPs_in_a_subrgn(subrgn_idx,6) = vertex6;
                     RPs_in_a_subrgn(subrgn_idx,7) = vertex7;
                     RPs_in_a_subrgn(subrgn_idx,8) = vertex8;
                     RPs_in_a_subrgn(subrgn_idx,9) = vertex9;
              end
          elseif(RP_SIM_TYPE == 4)
          no_subrgns = (RP_positions_per_row-3)^2; %a 5x5 matrix has 4 minor SRs
          no_subrgns_per_row = sqrt(no_subrgns);
          no_of_RPs_in_a_subrgn = 16;
          RPs_in_a_subrgn = zeros(no_subrgns,no_of_RPs_in_a_subrgn); % RPs_in_a_subrgn --> 16x4 vector; 4 vertices of 16 subregionss
          for subrgn_idx = 1:no_subrgns
                 vertex1 =  subrgn_idx+ 3*floor((subrgn_idx-1)/no_subrgns_per_row);  %formula -> SR1 has vertices 1,2,3,4,6,7,8,9,11,12,13,14; SR4 has vertices 6,7,8,11,12,13,16,17,18
                 vertex2 = vertex1 + 1;
                 vertex3 = vertex2 + 1;
                 vertex4 = vertex3 + 1;
                 vertex5 = vertex1 + RP_positions_per_row;
                 vertex6 = vertex2 + RP_positions_per_row;
                 vertex7 = vertex3 + RP_positions_per_row;
                 vertex8 = vertex4 + RP_positions_per_row;
                 vertex9 = vertex5 + RP_positions_per_row;
                 vertex10 = vertex6 + RP_positions_per_row;
                 vertex11 = vertex7 + RP_positions_per_row;
                 vertex12 = vertex8 + RP_positions_per_row;
                 vertex13 = vertex9 + RP_positions_per_row;
                 vertex14 = vertex10 + RP_positions_per_row;
                 vertex15 = vertex11 + RP_positions_per_row;
                 vertex16 = vertex12 + RP_positions_per_row;
                 RPs_in_a_subrgn(subrgn_idx,1) = vertex1;
                 RPs_in_a_subrgn(subrgn_idx,2) = vertex2;
                 RPs_in_a_subrgn(subrgn_idx,3) = vertex3;
                 RPs_in_a_subrgn(subrgn_idx,4) = vertex4;
                 RPs_in_a_subrgn(subrgn_idx,5) = vertex5;
                 RPs_in_a_subrgn(subrgn_idx,6) = vertex6;
                 RPs_in_a_subrgn(subrgn_idx,7) = vertex7;
                 RPs_in_a_subrgn(subrgn_idx,8) = vertex8;
                 RPs_in_a_subrgn(subrgn_idx,9) = vertex9;
                 RPs_in_a_subrgn(subrgn_idx,10) = vertex10;
                 RPs_in_a_subrgn(subrgn_idx,11) = vertex11;
                 RPs_in_a_subrgn(subrgn_idx,12) = vertex12;
                 RPs_in_a_subrgn(subrgn_idx,13) = vertex13;
                 RPs_in_a_subrgn(subrgn_idx,14) = vertex14;
                 RPs_in_a_subrgn(subrgn_idx,15) = vertex15;
                 RPs_in_a_subrgn(subrgn_idx,16) = vertex16;
          end
          elseif(RP_SIM_TYPE == 5)
          no_subrgns = (RP_positions_per_row-4)^2; %a 5x5 matrix has 4 minor SRs
          no_subrgns_per_row = sqrt(no_subrgns);
          no_of_RPs_in_a_subrgn = 25;
          RPs_in_a_subrgn = zeros(no_subrgns,no_of_RPs_in_a_subrgn); % RPs_in_a_subrgn --> 16x4 vector; 4 vertices of 16 subregionss
          for subrgn_idx = 1:no_subrgns
                 vertex1 =  subrgn_idx+ 4*floor((subrgn_idx-1)/no_subrgns_per_row);  %formula -> SR1 has vertices 1,2,3,4,6,7,8,9,11,12,13,14; SR4 has vertices 6,7,8,11,12,13,16,17,18
                 vertex2 = vertex1 + 1;
                 vertex3 = vertex2 + 1;
                 vertex4 = vertex3 + 1;
                 vertex5 = vertex4 + 1;

                 vertex6 = vertex1 + RP_positions_per_row;
                 vertex7 = vertex2 + RP_positions_per_row;
                 vertex8 = vertex3 + RP_positions_per_row;
                 vertex9 = vertex4 + RP_positions_per_row;
                 vertex10 = vertex5 + RP_positions_per_row;

                 vertex11 = vertex6 + RP_positions_per_row;
                 vertex12 = vertex7 + RP_positions_per_row;
                 vertex13 = vertex8 + RP_positions_per_row;
                 vertex14 = vertex9 + RP_positions_per_row;
                 vertex15 = vertex10 + RP_positions_per_row;

                 vertex16 = vertex11 + RP_positions_per_row;
                 vertex17 = vertex12 + RP_positions_per_row;
                 vertex18 = vertex13 + RP_positions_per_row;
                 vertex19 = vertex14 + RP_positions_per_row;
                 vertex20 = vertex15 + RP_positions_per_row;

                 vertex21 = vertex16 + RP_positions_per_row;
                 vertex22 = vertex17 + RP_positions_per_row;
                 vertex23 = vertex18 + RP_positions_per_row;
                 vertex24 = vertex19 + RP_positions_per_row;
                 vertex25 = vertex20 + RP_positions_per_row;

                 RPs_in_a_subrgn(subrgn_idx,1) = vertex1;
                 RPs_in_a_subrgn(subrgn_idx,2) = vertex2;
                 RPs_in_a_subrgn(subrgn_idx,3) = vertex3;
                 RPs_in_a_subrgn(subrgn_idx,4) = vertex4;
                 RPs_in_a_subrgn(subrgn_idx,5) = vertex5;
                 RPs_in_a_subrgn(subrgn_idx,6) = vertex6;
                 RPs_in_a_subrgn(subrgn_idx,7) = vertex7;
                 RPs_in_a_subrgn(subrgn_idx,8) = vertex8;
                 RPs_in_a_subrgn(subrgn_idx,9) = vertex9;
                 RPs_in_a_subrgn(subrgn_idx,10) = vertex10;
                 RPs_in_a_subrgn(subrgn_idx,11) = vertex11;
                 RPs_in_a_subrgn(subrgn_idx,12) = vertex12;
                 RPs_in_a_subrgn(subrgn_idx,13) = vertex13;
                 RPs_in_a_subrgn(subrgn_idx,14) = vertex14;
                 RPs_in_a_subrgn(subrgn_idx,15) = vertex15;
                 RPs_in_a_subrgn(subrgn_idx,16) = vertex16;
                 RPs_in_a_subrgn(subrgn_idx,17) = vertex17;
                 RPs_in_a_subrgn(subrgn_idx,18) = vertex18;
                 RPs_in_a_subrgn(subrgn_idx,19) = vertex19;
                 RPs_in_a_subrgn(subrgn_idx,20) = vertex20;
                 RPs_in_a_subrgn(subrgn_idx,21) = vertex21;
                 RPs_in_a_subrgn(subrgn_idx,22) = vertex22;
                 RPs_in_a_subrgn(subrgn_idx,23) = vertex23;
                 RPs_in_a_subrgn(subrgn_idx,24) = vertex24;
                 RPs_in_a_subrgn(subrgn_idx,25) = vertex25;
          end
          elseif(RP_SIM_TYPE == 6)
          no_subrgns = (RP_positions_per_row-7)^2; %a 8x8 matrix has 1 minor SRs
          no_subrgns_per_row = sqrt(no_subrgns);
          no_of_RPs_in_a_subrgn = 64;
          RPs_in_a_subrgn = zeros(no_subrgns,no_of_RPs_in_a_subrgn); % RPs_in_a_subrgn --> 16x4 vector; 4 vertices of 16 subregionss
          for subrgn_idx = 1:no_subrgns
                 vertex1 =  subrgn_idx+ 7*floor((subrgn_idx-1)/no_subrgns_per_row);  %formula -> SR1 has vertices 1,2,3,4,6,7,8,9,11,12,13,14; SR4 has vertices 6,7,8,11,12,13,16,17,18
                 vertex2 = vertex1 + 1;
                 vertex3 = vertex2 + 1;
                 vertex4 = vertex3 + 1;
                 vertex5 = vertex4 + 1;
                 vertex6 = vertex5 + 1;
                 vertex7 = vertex6 + 1;
                 vertex8 = vertex7 + 1;

                 vertex9 = vertex1 + RP_positions_per_row;
                 vertex10 = vertex2 + RP_positions_per_row;
                 vertex11 = vertex3 + RP_positions_per_row;
                 vertex12 = vertex4 + RP_positions_per_row;
                vertex13 = vertex5 + RP_positions_per_row;
                vertex14 = vertex6 + RP_positions_per_row;
                vertex15 = vertex7 + RP_positions_per_row;
                vertex16 = vertex8 + RP_positions_per_row;
                vertex17 = vertex9 + RP_positions_per_row;
                vertex18 = vertex10 + RP_positions_per_row;
                vertex19 = vertex11 + RP_positions_per_row;
                vertex20 = vertex12 + RP_positions_per_row;
                vertex21 = vertex13 + RP_positions_per_row;
                vertex22 = vertex14 + RP_positions_per_row;
                vertex23 = vertex15 + RP_positions_per_row;
                vertex24 = vertex16 + RP_positions_per_row;
                vertex25 = vertex17 + RP_positions_per_row;
                vertex26 = vertex18 + RP_positions_per_row;
                vertex27 = vertex19 + RP_positions_per_row;
                vertex28 = vertex20 + RP_positions_per_row;
                vertex29 = vertex21 + RP_positions_per_row;
                vertex30 = vertex22 + RP_positions_per_row;
                vertex31 = vertex23 + RP_positions_per_row;
                vertex32 = vertex24 + RP_positions_per_row;
                vertex33 = vertex25 + RP_positions_per_row;
                vertex34 = vertex26 + RP_positions_per_row;
                vertex35 = vertex27 + RP_positions_per_row;
                vertex36 = vertex28 + RP_positions_per_row;
                vertex37 = vertex29 + RP_positions_per_row;
                vertex38 = vertex30 + RP_positions_per_row;
                vertex39 = vertex31 + RP_positions_per_row;
                vertex40 = vertex32 + RP_positions_per_row;
                vertex41 = vertex33 + RP_positions_per_row;
                vertex42 = vertex34 + RP_positions_per_row;
                vertex43 = vertex35 + RP_positions_per_row;
                vertex44 = vertex36 + RP_positions_per_row;
                vertex45 = vertex37 + RP_positions_per_row;
                vertex46 = vertex38 + RP_positions_per_row;
                vertex47 = vertex39 + RP_positions_per_row;
                vertex48 = vertex40 + RP_positions_per_row;
                vertex49 = vertex41 + RP_positions_per_row;
                vertex50 = vertex42 + RP_positions_per_row;
                vertex51 = vertex43 + RP_positions_per_row;
                vertex52 = vertex44 + RP_positions_per_row;
                vertex53 = vertex45 + RP_positions_per_row;
                vertex54 = vertex46 + RP_positions_per_row;
                vertex55 = vertex47 + RP_positions_per_row;
                vertex56 = vertex48 + RP_positions_per_row;
                vertex57 = vertex49 + RP_positions_per_row;
                vertex58 = vertex50 + RP_positions_per_row;
                vertex59 = vertex51 + RP_positions_per_row;
                vertex60 = vertex52 + RP_positions_per_row;
                vertex61 = vertex53 + RP_positions_per_row;
                vertex62 = vertex54 + RP_positions_per_row;
                vertex63 = vertex55 + RP_positions_per_row;
                vertex64 = vertex56 + RP_positions_per_row;

                RPs_in_a_subrgn(subrgn_idx, 1) = vertex1;
                RPs_in_a_subrgn(subrgn_idx, 2) = vertex2;
                RPs_in_a_subrgn(subrgn_idx, 3) = vertex3;
                RPs_in_a_subrgn(subrgn_idx, 4) = vertex4;
                RPs_in_a_subrgn(subrgn_idx, 5) = vertex5;
                RPs_in_a_subrgn(subrgn_idx, 6) = vertex6;
                RPs_in_a_subrgn(subrgn_idx, 7) = vertex7;
                RPs_in_a_subrgn(subrgn_idx, 8) = vertex8;
                RPs_in_a_subrgn(subrgn_idx, 9) = vertex9;
                RPs_in_a_subrgn(subrgn_idx, 10) = vertex10;
                RPs_in_a_subrgn(subrgn_idx, 11) = vertex11;
                RPs_in_a_subrgn(subrgn_idx, 12) = vertex12;
                RPs_in_a_subrgn(subrgn_idx, 13) = vertex13;
                RPs_in_a_subrgn(subrgn_idx, 14) = vertex14;
                RPs_in_a_subrgn(subrgn_idx, 15) = vertex15;
                RPs_in_a_subrgn(subrgn_idx, 16) = vertex16;
                RPs_in_a_subrgn(subrgn_idx, 17) = vertex17;
                RPs_in_a_subrgn(subrgn_idx, 18) = vertex18;
                RPs_in_a_subrgn(subrgn_idx, 19) = vertex19;
                RPs_in_a_subrgn(subrgn_idx, 20) = vertex20;
                RPs_in_a_subrgn(subrgn_idx, 21) = vertex21;
                RPs_in_a_subrgn(subrgn_idx, 22) = vertex22;
                RPs_in_a_subrgn(subrgn_idx, 23) = vertex23;
                RPs_in_a_subrgn(subrgn_idx, 24) = vertex24;
                RPs_in_a_subrgn(subrgn_idx, 25) = vertex25;
                RPs_in_a_subrgn(subrgn_idx, 26) = vertex26;
                RPs_in_a_subrgn(subrgn_idx, 27) = vertex27;
                RPs_in_a_subrgn(subrgn_idx, 28) = vertex28;
                RPs_in_a_subrgn(subrgn_idx, 29) = vertex29;
                RPs_in_a_subrgn(subrgn_idx, 30) = vertex30;
                RPs_in_a_subrgn(subrgn_idx, 31) = vertex31;
                RPs_in_a_subrgn(subrgn_idx, 32) = vertex32;
                RPs_in_a_subrgn(subrgn_idx, 33) = vertex33;
                RPs_in_a_subrgn(subrgn_idx, 34) = vertex34;
                RPs_in_a_subrgn(subrgn_idx, 35) = vertex35;
                RPs_in_a_subrgn(subrgn_idx, 36) = vertex36;
                RPs_in_a_subrgn(subrgn_idx, 37) = vertex37;
                RPs_in_a_subrgn(subrgn_idx, 38) = vertex38;
                RPs_in_a_subrgn(subrgn_idx, 39) = vertex39;
                RPs_in_a_subrgn(subrgn_idx, 40) = vertex40;
                RPs_in_a_subrgn(subrgn_idx, 41) = vertex41;
                RPs_in_a_subrgn(subrgn_idx, 42) = vertex42;
                RPs_in_a_subrgn(subrgn_idx, 43) = vertex43;
                RPs_in_a_subrgn(subrgn_idx, 44) = vertex44;
                RPs_in_a_subrgn(subrgn_idx, 45) = vertex45;
                RPs_in_a_subrgn(subrgn_idx, 46) = vertex46;
                RPs_in_a_subrgn(subrgn_idx, 47) = vertex47;
                RPs_in_a_subrgn(subrgn_idx, 48) = vertex48;
                RPs_in_a_subrgn(subrgn_idx, 49) = vertex49;
                RPs_in_a_subrgn(subrgn_idx, 50) = vertex50;
                RPs_in_a_subrgn(subrgn_idx, 51) = vertex51;
                RPs_in_a_subrgn(subrgn_idx, 52) = vertex52;
                RPs_in_a_subrgn(subrgn_idx, 53) = vertex53;
                RPs_in_a_subrgn(subrgn_idx, 54) = vertex54;
                RPs_in_a_subrgn(subrgn_idx, 55) = vertex55;
                RPs_in_a_subrgn(subrgn_idx, 56) = vertex56;
                RPs_in_a_subrgn(subrgn_idx, 57) = vertex57;
                RPs_in_a_subrgn(subrgn_idx, 58) = vertex58;
                RPs_in_a_subrgn(subrgn_idx, 59) = vertex59;
                RPs_in_a_subrgn(subrgn_idx, 60) = vertex60;
                RPs_in_a_subrgn(subrgn_idx, 61) = vertex61;
                RPs_in_a_subrgn(subrgn_idx, 62) = vertex62;
                RPs_in_a_subrgn(subrgn_idx, 63) = vertex63;
                RPs_in_a_subrgn(subrgn_idx, 64) = vertex64;
            end
          end %if(RP_SIM_TYPE == 1)
      end %functionOfflineSetup
      function AP_cluster_idx = cluster_AP_kmeans(AP_positions, cluster_size)
            AP_cluster_idx = kmeans([real(AP_positions); imag(AP_positions)]',cluster_size);
            %{
            i = 1;
            max_try = 1;
            while (i <= cluster_size)
                i = i+1;
                if (length(find(AP_cluster_idx == i)) < 0.1*length(AP_positions))
                    AP_cluster_idx = kmeans([real(AP_positions); imag(AP_positions)]',cluster_size);
                    i = 1;
                    max_try = max_try + 1;
                end
                if(max_try == 10)
                    break;
                end
            end %(i <= 0.2*length(AP_positions))
            if(max_try == 10)
                fprintf("NO FEASIBLE KMEANS CLUSTER FOUND\n");
            end
            %}
            
            %fprintf("out of function find_APS_kmeans\n");
      end %cluster_AP_kmeans(AP_positions)
   end %methods ( Static = true )
end %classdef OnlineAlgo